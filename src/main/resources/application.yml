server:
  port: 9003            # 모니터링 기능 추가를 위한 포트 설정

spring:
  application:
    name: cns-dispatcher-service
  config:
    import: ""                          # config service 로부터 설정 데이터를 임포트 하는 것을 중지. 다시 config service 를 사용하고 싶다면 "optional:configserver:" 을 추가
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  cloud:
    function:
      definition: pack|label                  # 스프링 클라우드 함수가 관리할 함수 정의
                                              # | 연산자를 사용해 두 함수를 합성. 함수 사이의 서로 다른 입출력 타입을 내부적으로 변환함.
    stream:
      bindings:                                 # 대상 바인딩 설정을 위한 섹션
        packlabel-in-0:                         # 입력 바인딩
          destination: order-accepted           # 바인더를 연결할 대상의 브로커 내에서의 실제 이름 (rabbitmq exchange)
          group: ${spring.application.name}     # 대상에 관심을 갖는 소비자 그룹 (애플리케이션 이름과 동일)
        packlabel-out-0:                        # 출력 바인딩
          destination: order-dispatched         # 바인더를 연결할 대상의 브로커 내에서의 실제 이름 (rabbitmq exchange)
    config:
      enabled: false                    # 스프링 클라우드 컨피그 클라이언트 통합을 비활성화
      uri: http://localhost:8888
      request-connect-timeout: 5000     # 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 5000        # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false                  # 설정 서버 연결 실패를 치명적 오류로 인식 -> retry 작동 활성화를 위한 조건
      # production 에서는 해당 값을 true 로 설정
      retry:
        max-attempts: 6                 # 시도의 최대 횟수
        initial-interval: 1000          # 최초 재시도 지연 시간(밀리초)
        max-interval: 2000              # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1                 # 지연 시간 계산 승수

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop      # info 로 시작하는 속성은 info 엔드포인트로 반환된다.

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always       # 애플리케이션의 상세한 상태 정보
      show-components: always   # 애플리케이션이 사용하는 구성 요소에 대한 정보
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}             # 애플리케이션 이름으로 마이크로미터 공통 태그를 추가한다. 이로 인해 모든 매트릭에 적용되는 프로메데우스 레이블이 만들어진다.
  info:
    env:
      enabled: true     # info 로 시작하는 환경변수 정보를 info 엔드포인트를 통해 노출한다
    java:
      enabled: true
    os:
      enabled: true